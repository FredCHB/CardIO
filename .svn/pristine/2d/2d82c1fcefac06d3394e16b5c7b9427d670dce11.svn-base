//
//  ViewController.m
//  CardIO
//
//  Created by Fred on 7/11/16.
//  Copyright Â© 2016 Fred. All rights reserved.
//

#import "ViewController.h"

#import "CardManager.h"

@interface ViewController ()

@end

@implementation ViewController{
    NSMutableArray *rectanglePoint;
    NSDictionary *rectangleMap;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    rectangleMap = [[NSDictionary alloc] initWithObjectsAndKeys: 0, @"topLeft", 1, @"topRight", 2, @"bottomRight", 3, @"bottomLeft", nil];
    
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
    UIImage *image = [info objectForKey:UIImagePickerControllerOriginalImage];
    
    NSLog(@"image width height:%f %f", image.size.width, image.size.height);
    NSLog(@"view width height:%f %f", self.imagePicked.frame.size.width, self.imagePicked.frame.size.height);
    
    CGFloat scaleWidth = image.size.width/self.imagePicked.frame.size.width;
    CGFloat scaleHeight = image.size.height/self.imagePicked.frame.size.height;
    CGFloat currentScale = 1;
    CGFloat widhtAdd = 0;
    CGFloat heightAdd = 0;
    if(image.size.width/image.size.height > self.imagePicked.frame.size.width/self.imagePicked.frame.size.height){
        currentScale = scaleWidth;
        heightAdd = (self.imagePicked.frame.size.height - image.size.height/currentScale) / 2;
    }else{
        currentScale = scaleHeight;
        widhtAdd = (self.imagePicked.frame.size.width - image.size.width/currentScale) / 2;
    }
    //CGFloat scaleAdd = (self.imagePicked.frame.size.height - image.size.height/currentScale)/2;
    
    NSLog(@"37 width %f height %f current %f", scaleWidth, scaleHeight, currentScale);
    CIRectangleFeature *rectangleFeature = [[CardManager getSharedInstance] captureImageRectangle:image];
    NSLog(@"top left position %f %f", rectangleFeature.topLeft.x, rectangleFeature.topLeft.y);
    [self.imagePicked setImage:image];
    [self.imagePicked setClipsToBounds:YES];
    [self.imagePicked setContentMode:UIViewContentModeScaleAspectFit];
    [self.imagePicked setUserInteractionEnabled:YES];
    
    NSLog(@"42 %f", self.imagePicked.image.size.width);
    CGPoint topLeft = CGPointMake(rectangleFeature.topLeft.x/currentScale + widhtAdd, (image.size.height - rectangleFeature.topLeft.y)/currentScale + heightAdd);
    CGPoint topRight = CGPointMake(rectangleFeature.topRight.x/currentScale + widhtAdd, (image.size.height - rectangleFeature.topRight.y)/currentScale + heightAdd);
    CGPoint bottomLeft = CGPointMake(rectangleFeature.bottomLeft.x/currentScale + widhtAdd, (image.size.height - rectangleFeature.bottomLeft.y)/currentScale + heightAdd);
    CGPoint bottomRight = CGPointMake(rectangleFeature.bottomRight.x/currentScale + widhtAdd, (image.size.height - rectangleFeature.bottomRight.y)/currentScale + heightAdd);
    
    rectanglePoint = [NSMutableArray arrayWithObjects:[NSValue valueWithCGPoint:topLeft],
                                               [NSValue valueWithCGPoint:topRight],
                                               [NSValue valueWithCGPoint:bottomRight],
                                               [NSValue valueWithCGPoint:bottomLeft], nil];
    
    UIButton *butTopLeft=[UIButton buttonWithType:UIButtonTypeRoundedRect];
    butTopLeft.frame= CGRectMake(topLeft.x, topLeft.y, 15, 15);
    [butTopLeft setBackgroundColor:[UIColor redColor]];
    [butTopLeft setTag:[rectangleMap[@"topLeft"] integerValue]];
    [butTopLeft addTarget:self action:@selector(draggedOut:withEvent:) forControlEvents:UIControlEventTouchDragInside];
    [self.imagePicked addSubview:butTopLeft];
    
    UIButton *butTopRight=[UIButton buttonWithType:UIButtonTypeRoundedRect];
    butTopRight.frame= CGRectMake(topRight.x, topRight.y, 15, 15);
    [butTopRight setBackgroundColor:[UIColor blueColor]];
    [butTopRight setTag:[rectangleMap[@"topRight"] integerValue]];
    [butTopRight addTarget:self action:@selector(draggedOut:withEvent:) forControlEvents:UIControlEventTouchDragInside];
    [self.imagePicked addSubview:butTopRight];
    
    UIButton *butBottomLeft=[UIButton buttonWithType:UIButtonTypeRoundedRect];
    butBottomLeft.frame= CGRectMake(bottomLeft.x, bottomLeft.y, 15, 15);
    [butBottomLeft setBackgroundColor:[UIColor greenColor]];
    [butBottomLeft setTag:[rectangleMap[@"bottomLeft"] integerValue]];
    [butBottomLeft addTarget:self action:@selector(draggedOut:withEvent:) forControlEvents:UIControlEventTouchDragInside];
    [self.imagePicked addSubview:butBottomLeft];
    
    UIButton *butBottomRight=[UIButton buttonWithType:UIButtonTypeRoundedRect];
    butBottomRight.frame= CGRectMake(bottomRight.x, bottomRight.y, 15, 15);
    [butBottomRight setBackgroundColor:[UIColor yellowColor]];
    [butBottomRight setTag:[rectangleMap[@"bottomRight"] integerValue]];
    [butBottomRight addTarget:self action:@selector(draggedOut:withEvent:) forControlEvents:UIControlEventTouchDragInside];
    [self.imagePicked addSubview:butBottomRight];
    [self drawRectangle];
    [self dismissViewControllerAnimated:true completion:nil];
}

- (void)drawRectangle{
    if([self.imagePicked.layer.sublayers count] > 4){
        [[self.imagePicked.layer.sublayers objectAtIndex:4] removeFromSuperlayer];
    }
    UIBezierPath *path = [UIBezierPath bezierPath];
    [path moveToPoint:[rectanglePoint[0] CGPointValue]];
    [path addLineToPoint:[rectanglePoint[1] CGPointValue]];
    [path addLineToPoint:[rectanglePoint[2] CGPointValue]];
    [path addLineToPoint:[rectanglePoint[3] CGPointValue]];
    [path addLineToPoint:[rectanglePoint[0] CGPointValue]];
    
    CAShapeLayer *shapeLayer = [CAShapeLayer layer];
    shapeLayer.path = [path CGPath];
    shapeLayer.strokeColor = [[UIColor blueColor] CGColor];
    shapeLayer.lineWidth = 3.0;
    shapeLayer.fillColor = [[UIColor clearColor] CGColor];
    [self.imagePicked.layer addSublayer:shapeLayer];
}

- (IBAction)draggedOut: (id)sender withEvent: (UIEvent *) event {
    UIButton *selected = (UIButton *)sender;
    selected.center = [[[event allTouches] anyObject] locationInView:self.view];
    [rectanglePoint replaceObjectAtIndex:selected.tag withObject:[NSValue valueWithCGPoint:CGPointMake(selected.center.x, selected.center.y)]];
    [self drawRectangle];
}

- (IBAction)openCameraButton:(id)sender {
    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
        UIImagePickerController *picker = [[UIImagePickerController alloc] init];
        picker.delegate = self;
        [picker setSourceType:UIImagePickerControllerSourceTypeCamera];
        picker.allowsEditing = false;
        [self presentViewController:picker animated:true completion:nil];
    }
}

- (IBAction)openPhotoLibraryButton:(id)sender {
    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypePhotoLibrary]) {
        UIImagePickerController *picker = [[UIImagePickerController alloc] init];
        picker.delegate = self;
        [picker setSourceType:UIImagePickerControllerSourceTypePhotoLibrary];
        picker.allowsEditing = true;
        [self presentViewController:picker animated:true completion:nil];
    }
}

- (IBAction)saveImageButton:(id)sender {
    NSData *imageData = UIImageJPEGRepresentation(self.imagePicked.image, 0.6);
    UIImage *compressedJPGImage = [UIImage imageWithData:imageData];
    UIImageWriteToSavedPhotosAlbum(compressedJPGImage, nil, nil, nil);
    
    UIAlertView *alert = [[UIAlertView alloc]initWithTitle: @"Wow"
                                                   message:@"Your image has been saved to Photo Library!" delegate:nil
                                         cancelButtonTitle:@"Ok"
                                         otherButtonTitles:nil, nil];
    [alert show];
}
@end
